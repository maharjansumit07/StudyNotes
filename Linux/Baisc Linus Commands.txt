What is the sign displayed at first terminal login?

"$" -- typically a default command prompt for regular account with standard user permissions and does not have administrative or root access. Users can execute most commands, but may not have the necessary permissions to perform certain administrative tasks.

" # "  -- a default command prompt for the root or administrative user account. The user or root has full administrative privileges and can execute any commands. it has the highest level of access and can perform the administrative tasks such as installing, modifying and managing user accounts. 
----------------------------------------------------------------------------------------------------------------------------------------

Hostname:  System's identity name. 
---------
The hostname is saved into /etc/hostname

$ sudo nano /etc/hostname
set the hostname or change the hostname if present. 

or simply directly change the hostname by this command. 
$ sudo hostnamectl set-hostname "new_hostname"

or we can reflect to /etc/hosts directly by adding this.
$ sudo hostnamectl set-hostname "new_hostname" --static


----------------------------------------------------------------------------------------------------------------------------------------
Package manager			
ubuntu/mint         -- apt, snapd, flatpak, software center, dpkg, pip, aptitude
Debian              -  apt,aptitude, snap, flatpak,apt-get,apt-cache
centos/rocky linux  -- dnf , yum		
fedora              - yum, dnf		
arch                - pamac, yay, paru,, flatpak		

=============================================================================================================================

Package management:
------------------
apt/apt-get  :  Advanced Packet Tool (APT) -- a linux utility to handle the installation, update, and removal of software packages.
---------------
$ sudo apt update
$ sudo apt upgrade
$ sudo apt install software-package-name
$ sudo apt remove software-package-name      -- remove a pakage not configuraiton files.
$ sudo apt purge software-package-name       --remove a pacakge along with its configuration files. 
$ apt list --installed                      -- lists all installed packages on the system. 
$ apt search package-name
$ apt show package-name
$ apt-cache depends package-name            -- lists the dependencies for the package.

dpkg :  Package management tool, and is a lower-level tool that operates directly on '.deb' package file.
------
$ sudo dpkg -i package-name.deb         -- install downloaded '.deb' package. 
$ sudo dpkg -r package-name             -- remove package
$ sudo dpkg -P pacakge-name             -- purge package, remove along with configuraiotn file.
$ dpkg -l                               -- List installed packages
$ dpkg -s package-name                  -- check package status.
$ dpkg -L package-name                  -- List package files
$ sudo dpkg-reconfigure package-name    -- reconfigure an installed package.

snap: a package management system. It allows the distribution and installaiton of software packages called 'snaps' that are containerized and works accoss different linux distribution. 
-----

Install and enable snap.
------------------------
$ sudo apt install snapd
$ sudo systemctl enable --now snapd.socket    -- to enable snapdd services.
$ sudo snap install core                      -- recommended, as many snaps depends on this. 
$ sudo snap install package-name              -- to install package. 
$ snap list                                   -- to display all installed packages by snap.
$ sudo snap remove package-name               -- to remove package. 

Commonly used commands for snap as below;
Basics: find, info, install, remove, list
          ...more: refresh, revert, switch, disable, enable, create-cohort
          History: changes, tasks, abort, watch
          Daemons: services, start, stop, restart, logs
      Permissions: connections, interface, connect, disconnect
    Configuration: get, set, unset, wait
      App Aliases: alias, aliases, unalias, prefer
          Account: login, logout, whoami
        Snapshots: saved, save, check-snapshot, restore, forget
           Device: model, remodel, reboot, recovery
     Quota Groups: set-quota, remove-quota, quotas, quota
  Validation Sets: validate
        ... Other: warnings, okay, known, ack, version
      Development: validate


=========================================================================================================================================
File Types   = the file types are defied by their first character or letter. 


1. Regular files   == "-"
    -rw-rw-r-- 1 k k    0 Dec  9 09:16 myfile1

2. Directory files  == "d"
    drwxrwxr-x 2 k k 4096 Dec  9 09:16 mydir
    

3. Special files
    a. Block files  == "b"
    There files are hardware files and they are present in /dev. They are create by partitioning or by fdisk.
    brw-rw----  1 root disk        7,   0 Dec  8 13:31 loop0
    brw-rw----  1 root disk        7,   7 Dec  8 13:31 loop7

    b. Character Device file  == "c"
    They provide a serial steam of input or output.
    crw-r----- 1 root root 13, 32 Dec  9 08:39 /dev/input/mouse0

    c. Pipe file == "p"
    prw-rw-r--   1 k k    0 Dec  9 09:56 backpipe

    d. Symbolic file  == "l"
    These are linked files, meaning a shortcut files as in Windows. The inode number for theses file and parent files are same.
    lrwxrwxrwx 1 k k    7 Dec  9 09:16 my_link -> myfile1

    e. Socket File  == "s"
    it is used to pass information between applications.
    srw-rw-rw- 1 root       root          0 Dec  8 13:31 acpid.socket
    srw-rw---- 1 root       docker        0 Dec  8 14:15 docker.sock

=========================================================================================================================================
Command Accesibility (to get details about commands)

--help or /h  -> to learn about the commands , usually used after the command to get more detail.
info    ->  it provides detailed hyperlinked documentations. The pages are organized into chapters and sections. 
whatis  ->  will display one line summary of the purpose of the command. It can be very helpful when we want the description of the command without going into the detailed syntax or options. 
man     ->  short of "Manual", provides the standard reference documentation 
----------------------------------------------------------------------------------------------------------------------------------------
Linux Structure. 

                   | ---- /bin/         [Essential User Command Binaries]
                   | 
                   | ---- /boot/        [Files of the boot loader]
                   |     
                   |---- /dev/          [Hardware Device files]
                   |
                   |---- /media/        [Removable Media]
                   |
                   |---- /mnt/          [Mounted FileSystem]
                   |
                   |---- /opt/          [Add on Application software package]
                   |                    
                   |---- /sbin/         [System Binary]
                   |
  / (root)---------|---- /srv/          [Service Data]
                   |
                   |---- /proc/         [Process Information]
                   |
                   |---- /home/         [Home Directory]
                   |
                   |---- /etc/          [Configuration Files]
                   |
                   |---- /var/          [Variable Files]
                   |
                   |---- /lib/          [System Libraries]
                   |
                   |---- /tmp/          [Temporary files]
                   |
                   |---- /usr/          [User Programs]


=================================================================================================================

File And Directory Management
-----------------------------
pwd => to know the current location.
ls =>  to list the file
rm  ==> Remove command, used for removing or deleting files and directories. 
mkdir ==> Make Directory, is used to Create a new directory or folder. 
rmdir ==> remove directory, to remove directory. 
history ==> to view and manage the command history. 
mv == to move or in linux to rename file. 


Editors:
------------
vi  => vim editor to edit the files. [!Note] Always user 'sudo' if you are not logged in as 'root' user. 
Nano => simple text editor, and very friendly. 
gedit => Graphical Text Editor as part of GNOME desktop environment.

View data within the file.
---------------------------
cat  => a fundamental command that is used for various text view or manipulations tasks.
less => similar to cat , but used to view the contents of text files or the output of other commands. 
more => similar to cat, but used to view the contents of text files or the out of other commands one page at a time.
cd ==> Change Directory, to navigate to the file system or other directory. 
$ cd (enter)      or cd ~/    or cd ~
 this is take directly to home directory.

head  == to display  the first few lines, default 10 lines, of a file or the output from the command.
------
$ head /path/to/file
$ head -20 /path/to/file    or,  $ head -n 20 /path/to/file  -- to display till line no. 20. 

tail == To display the last few line, deafult 10 lines, of a file or the output from the coammd. 
-------

$ tail /path/to/file
$ tail -4 /path/to/file         -- to display the last 4 lines for the file.

Relative Path ==> refers to a way of specifying the location  of a file or directory that is relative to the current working directory.
directory
eg. I have a file here at /home/test folder with text.txt file.
Linux_practical:~/test$ ls -l
total 4
-rw-r--r-- 1 root root    0 Jun  1 19:57 test
-rw-r--r-- 1 root root    0 Jun  1 19:58 test.txt
drwxr-xr-x 3 root root 4096 Jun  1 19:55 test1

now jumping into child directories till test2.
Linux_practical:~/test$ cd test1
Linux_practical:~/test/test1$ cd test2

so relative path here is that .. represents 1 step above the child directory, 
and adding another .. means going another above of child directory or towards parent directory.
Here, as example, I am trying to view the file from Test2 folder, going 2 steps towards the parent directory.
so I am going from test2 to test1 and then test1 to test parent directory. 
Linux_practical:~/test/test1/test2$ ls -l ../../
total 4
-rw-r--r-- 1 root root    0 Jun  1 19:57 test
-rw-r--r-- 1 root root    0 Jun  1 19:58 test.txt
drwxr-xr-x 3 root root 4096 Jun  1 19:55 test1

Similarly, we can move from parent directory to child directory as needed. 

Absolute Path==> refers to the complete and exact location of a file or directory from root directory.
Here, We are in test2 folder. 
Linux_Practical:~/test/test1/test2$ pwd
/home/user/test/test1/test2
Linux_Practical:~/test/test1/test2$ ls
2ndtest.txt
Linux_Practical:~/test/test1/test2$ cd
Linux_Practical:~$

now to view the file, we will be looking from root to home directory going int user directory and lastly to its child directory.
Linux_Practical:~$ ls /home/user/test/test1/test2/
2ndtest.txt

-----------------------------------------------------------------------------------------------------------------------------------
External search within the file.
grep => (Global Regular Expression Print) a command line tool for searching and filtering text. It is widely used in shell scirpts system administration tasks, and data processing workflows. 
egrep  ==> (Extended GREP) is a more pattern matching than grep. as Grep uses basic expressionss , egrep uses extended regular expressions. It can be used to search more than 1 pattern search. 

------------------------------------------------------------------------------------------------------------------------------------

copy files,
-----------
cp ==> to copy files and directories.
scp ==> Secure Copy Protocol , to securely copy files between computer over a network. 
scp user@ip:path/to/remote /path/to/local_directory/
eg.   $ scp file.txt username@hostname:/remote/directory/

mv ==> to more a file or rename files or directories.
-------------------------------------------------------------------------------------------------------------------------

find out file location.
------------------------
whereis ==> to locate the binary,source, and manual page files for a given command or program. 

find ==> used to search files and direcories based on various criteria, such as names, type, size, permissions and more.
find /path/to/directory -name "filename.txt"
find /path/to/directory -type f # for files,  - type d for direcotry.
find /path/to/directory -size +100M             -- files larger than 100MB , -size -20k --files smaller than 20K.
find /path/to/directory -mtime +8               --files modified more than 8 days ago,     -mtime -1  --files modified less than 1 day ago.
find /path/to/directory -perm 777               --files with permissions 777 (rwxrwxrwx)
find /path/to/directory -name "*.txt" -exec cp {} /backup/directory \;      --to execute command on found files.
find /path/to/directory -type f -name "*.doc" -size +40M -mtime -7          --to find the file extensions with doc with size more than 40MB and modified in within last 7 days.
find / -iname nginx         -- to find out the nignx named files and folders. -i == remove case sensitive.
-----------------------------------------------------------------------------------------------------------------------------------
Diff: 

-----
diff file1 file2
cmp file1 file2


=========================================================================================================================
File permissions:
-------------------
Read= 4,        write = 2       execute =1 
permissions.
0       No permission
1       only execute
2       only write
3       write and execute
4       only Read
5       Read and execute
6       read and write
7       read, write, execute.
-------------------------------------------------------------------------------------------------------------------------------
chmod: change mode, to change the access permission fo file or directories.
----------
chmod 777 example.txt
here first 7 is for the user,  second 7 is for Group and third 7 is for others.

or, 
chmod u=rwx, g=rwx ,o=rwx file/directory
chmod u=rw, g=, o= files/directory

or, simply all uses the below command for the permission change.
chmod +rwx files/directory 


chown: Change ownership
-------
$ chown [option] owner[:group] file
$ chown john:staff document.txt
or 
$ chown john document.txt
$ chown -R john:staff /path/to/directory
The above example is to change the ownership of a directory and all its contents.


==========================================================================================================================

inode ==> index node, a data structure that stores information about a file or directory. it is used by the operating ysstem to access and manage the file or directory. 
it stores the metadata , or attributes of a file or directory such as file type, permissions, user and group ownership, file size, timestamp,and file store place. 
$ ls -i 
12345 -rw-r--r-- 2 user group 1024 May 31 2024 
12345 -rw-r--r-- 2 user group 1024 May 31 2024 
Here, as above, 12345 is the inode. 

hard link ==> allows efficient file management and organization by providing multiple access points to the same file data.
$ ln original_file hard_link_file
$ ls -li
25165842 -rw-r--r-- 2 user group 25 May 31 12:34 hard_link.txt
25165842 -rw-r--r-- 2 user group 25 May 31 12:34 original_file.txt

$ echo "This is an updated file." > original_file.txt
$ cat original_file.txt
This is an updated file.
$ cat hard_link.txt
This is an updated file.

soft link==> also known as symbolic link, is a special file that serves as a reference to another file or direcotry. 
Similar to creating a shortcut file in windows.
It is created using the 'ln' command with the '-s' option.
eg. 
ln -s source.filename linkname
ln -s file1 link1

ln -s /home/user/documents/important_document.txt /home/user/desktop/important_doc_link

To view the soft link.
ls -l /home/user/desktop
lrwxrwxrwx 1 user user 36 Jun 01 2024 important_doc_link -> /home/user/documents/important_document.txt

----------------------------------------------------------------------------------------------------------------------------------------
User Group and Management

Whoami => to view the active user using the shell.
or 
users   == to view the current user.

su  => switch user

Chown  => change ownership of the file or directory.

chmod  => to change the access permissions of the files or directories.

useradd  => to add users.

groupadd => to add group

passwd  => to change password.

groups => to manage user groups. Groups are collections of users that share permissions and access rights. 

usermod => to modify user account properties, such as primary group, login shell,, home directory and other settings. 

groupmod => to modify the properties of an existing group including changing group name, Group ID or the group members.

chage  => to manage user account password and aging information .

chfn  => change User information 

chsh  => to change user's default login shell. the login shell is the program that is executed when a user logs in to the system.

getent  => used to retrieve information about users, groups, hosts, networks, protocols, services, and other database entries. It gets entries from Name service switch libraries.

cut => a powerful tool to extract specific fields or columns from input text data, commonly used in shell scripts and command line operations to manipulate data. 

awk => widely used for data manipulations and extractions. 

sed => can be used for finding and replacing operations, deleting or adding lines and more. 

-------------------------------------------------------------------------------------------------
change

-I  ==> inactive,    

-d  ==> last date    ==>         chage -d 2023-12-12 username  

-E  ==> Expire date  ==>         chage -E 2024-05-31 username  

-l  ==> list, view inforamion.  ==>   chage -l username

-m  ==> minimum day  ==>         chage -d 2024-05-29 username   

-M  ==> Maximum day   ==>        chage -M -1 username

-W  ==> warning day. ==>         chage -W 7 username

===================================================================================================================================

usermod -a -G group1,group2 username           ==> Add user to groups

usermod -G group1,group2 username              ==> remote users from all group except the primary group.

usermod -g <new group name> username           ==> to change user's primary group

usermod -s /bin/bash username                  ==> to change users login shell.

usermod -L username                            ==> to lock or disable the user account     

usermod -l new_name existing_username          ==> to change the username.

usermod -d /new/home/directory                ==>  To change users Home directory
usermod -d /new/home/direcotry -m username    == to change home director for specific user.
usermod -L username  or usermod -U username   ==> to lock the user. 

usermod -e YYYY-MM-DD username                ==> to set the expire date

usermod -s /path/to/new/shell username        ==> to change user's shell

usermod -p passord_expire_days username      ==> to set or change the user's password expire date information. 

usermod -u new_uid username                 ==> to change UDI .

====================================================================================================================================
passwd username                 ==>  change user password
passwd -x 90 username           ==>  Change User's password expiration date to 90 days.
passwd -l username              ==>  to lock the user account.
passwd -u username              ==>  unlock the user account.
passwd -e username              ==>  To set the password expire immediately.
====================================================================================================================================
To check users login:
======================
w  ---  show who logged on and their activity.
-------
$ w 
20:49:48 up 3 min,  1 user,  load average: 0.16, 0.10, 0.03
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
Linux    pts/1    -                20:46    3:32   0.04s  0.02s -bash


-----------------------------------------------------------------------------------------------------------------------

who :   to view who logged in
------
who         == display current users logged in detail.
who -a      == all users  or simply it is combination of all (-b -d --login -r -p -t -T -u)
who -b      == time of last boot
who -d      == print dead process
who -H      == print link of column headings 
who -l      == login 
who -q      == to view all logins names 
who -r      == to view run level,
who -s      == print only name
who -T      == to display about terminal type and status of each users currently logged in.
who -u      == List of users logged in with process id

Linux@Pratical:~$ who -u
Linux   pts/1        2024-06-01 11:57  old          487

Linux@Practical:~$ who -a
           system boot  2024-06-01 11:57
LOGIN      console      2024-06-03 21:54            202733 id=cons
LOGIN      tty1         2024-06-03 21:54            202646 id=tty1
Linux   - pts/1        2024-06-01 11:57  old          487
           run-level 5  2024-06-01 11:57
           pts/2        2024-06-01 23:07            119361 id=ts/2  term=0 exit=0

---------------------------------------------------------------------------------------------------------------
Last:   == show listing of last users logged in. 
------
last        == display information about the last logged in users. 
last -a     == display hostname in last column
last -d     == translate ip into hostname 
last -f     == use a specific file instead of /var/log/wtmp
last -F     == Print full login and logout times and date
last -i     == dipslay IP 
last -s     == since times

eg. last -s (yyyy-mm-dd)
    last -s (yyyy-mm-dd hh:mm:ss)
    last -s (hh:mm)
    last -s -(number)days
    last -s (username)
    last -s (1stusername 2nusername)

Linxu@Practical:~$ last -s  12:00
wtmp begins Sat May 25 13:47:06 2024

last -t     == until time
eg.
Linux@Practical:~$ last -t  12:00
Linux    pts/1                         Sat Jun  1 11:57    gone - no logout
reboot   system boot  5.15.146.1-micro Sat Jun  1 11:57   still running
Linux    pts/1                         Wed May 29 21:59 - crash (2+13:58)
reboot   system boot  5.15.146.1-micro Wed May 29 21:59   still running
Linux    pts/1                         Wed May 29 18:34 - crash  (03:24)

last -p     == display who are present at the specific time.
last -w     == display full user and domain names
last -xr    == display system shut down enteries and run level changes.

lastb       == to view bad login attempts but needs root access.
# lastb 
------------------------------------------------------------------

lslogins - display information about the known users in the system. 
----------
$ lslogins 
$ lslogins -L           == display the list of users, ID and last login time. 
$ lslogins -f           == display login fail with userId and time 
$ lslogins -e           == display user export-able report.
$ lslogins -s           == display system accounts
$ lslogins -u           == display user accounts
$ lslogins username     == display users accounts in detail with home direcotry, shell, GID, login times, processes running. 

====================================================================================================================================

DNS troubleshooting commands
-----------------------------
DIG:
----
dig == Domain information Groper - a troubleshooting tool in linux and Unix-like operating system. It is used to perform DNS lookups and analyze the responses.
dig www.example.com.np
dig -x IP-ADDRESS           	==> to find out the Name server PTR (Pointer Record).
dig @8.8.8.8 example.com.np
dig example.com.np A
dig example.com.np MX
dig SOA +multiline example.com.np
dig +nssearch example.com.np		==> to display primary and secondary name servers with IP address.
dig SOA example.com.np @ns1.example.com		==> to retrieve SOA record from the specific name server. 
dig +trace www.example.com
dig +yaml www.example.com


NSLOOKUOP
---------
nslookup www.example.com
nslookup -type=PTR IP-ADDRESS/domain-name       , MX, SOA, 
nslookup -debug www.example.com     ==> provides more dtailed information about DNS resolution process,
including the query and response packets.
nslookup -debug -type=A www.example.com
nslookup server 8.8.8.8 example.com         ==> to use 8.8.8.8 server and perform a lookup for the domain example.com

host:
------
host www.example.com         ==> it will display address and mail primary and secondary MX server.
host -a www.example.com      ==> will display detail of A,AAA, MX and NS information.
host -C google.com           ==> to display the nameservers IP and SOA record
host -d google.com           ==> to display nameservers and MX record.
host -t soa google.com       == to display soa record.
=========================================================================================================================================
mount    ---- mount a filesystem
------
etc/fstab    --- may contain lines describing what devices are mounted and location.
lsblk        --- List block devices , list information about all available or specified block devices.

simple way to mound a new drive in linux.
------------------------------------------
$ lsblk   -- to list all block device, including new drivers
or, else the new drive will be found on /dev/sdb or dev/nvme0n1

$ sudo mkdir /mnt/newdrive              --create a mount point for the new drive
$ sudo mount /dev/sdb1 /mnt/newdrive    --mount the new drive to mount point.
$ df -h                                 -- verify the mount, this will show the new drive mounted at /mnt/newdrive
$ sudo nano /etc/fstab                  
/dev/sdb1 /mnt/newdrive ext4 default 0 0 
-- we need to keep the above /dev/sdb1 line code into /etc/fstab if we want that mount to be automatically open on boot.

Mount a file system:
$ sudo mount /dev/sdb1 /mnt/data

mount a file system with a specific file system type:
$ sudo mount -t ext4 /dev/sdb1 /mnt/data

Mount a remote file system (eg. NFS):
$ sudo mount -t nfs 192.168.1.100:/shared /mnt/remote

mount a file system with a specific mount option 
$ sudo mount -t ext4 -o rw,noatime,data=ordered /dev/sdb1 /mnt/data

mount cd/dvd
$ sudo mount /dev/cdrom /mnt

mount iso image
$ sudo mount -o loop /path/to/image.iso /mnt

------------------------------------------------------------------------------
df: -- display information bout disk usages on all mounted filesystem. 
-----
$ df                -- display all mounted filesystem. 
$ df -h             -- display all mounted filesystem with human readable format. 
$ df -h /home       -- display size information about specified path 
$ df -i             -- dipslay inode usage instead of block usage. 
$ df -k             -- display in kilobyte.
$ df -m             -- display in megabyte.
$ df -BG            -- Display in Gigabypte. 'B'= block size.
$ df -x tmpfs       -- display exluding specific types of filesystem.
$ df -P             -- dipslay in POSIX format.
$ df -T             -- display with File System Type.
$ df -h -T nfs      -- display network file systems
$ watch -n 5 df -h  -- display periodically for real time, every 5 mintues.


Script to check disk usage and send alert.
------------------------------------------
#!/bin/bash

THRESHOLD=90

df -h | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{ print $5 " " $1 }' | while read output;
do
  usep=$(echo $output | awk '{ print $1}' | cut -d'%' -f1  )
  partition=$(echo $output | awk '{ print $2 }' )
  if [ $usep -ge $THRESHOLD ]; then
    echo "Warning: The partition \"$partition\" has used $usep% of total space"
  fi
done

-------------------------------------------
script to generate Disk Usage Report:
-------------------------------------
#!/bin/bash

OUTPUT_FILE="/path/to/disk_usage_report.txt"

echo "Disk Usage Report - $(date)" > $OUTPUT_FILE
echo "=============================" >> $OUTPUT_FILE
df -h >> $OUTPUT_FILE
---------------------------------------
---------------------------------------------------------------------------------

du: -- used to estimate and summarize disk space usage of files and directories.
---
$ du 
$ du /path/to/directory             -- to display disk usages of directory and its subdirectories.
$ du -h /path/to/direcotry          -- to display human readable format.
$ du -sh /path/to/direcotry         -- to display summary of disk usages.
$ du -ah /path/to/direcotry         -- to display usages of all files and subdirectories.
$ du -h --max-depth=1 /path/to/directory            -- to speciying the depth of direcotry.
$ du -h /path/to/direcotry/file1    -- to display usages of specific file. 
$ du -h --exclude="*.log" /path/to/directory        -- to exclude files or directories.
$ du -h /path/to/directory1 /path/to/directory2     -- to display usages of multiple directories.

$ du -h --max-depth=1 | sort -hr    -- to find large directories
$ du -h /path/to/directory > disk_usage_report.txt    -- to monitor disk changes over time and save it to a file. 
$ diff disk_usage_report.txt <(du -h /path/to/directory)  -- to compare the report.

=========================================================================================================================================
Process and resource monitoring:
---------------------------------
ps -- Porcess status
-----
-- provicdes  a snapshot of the current processes running on the system.
$ ps
$ ps -e     |---\
                 |-- To viee all process running on the system.
$ ps aux    |---/

$ ps -f             -- full format listing, giving more detailed information about each process.
$ ps --forest       -- show processes in a tree formato, useful for visualizing parent-chlid relationship.
$ ps -u username    -- display processes for a specifi user
$ ps -x             -- show processes without a controlling terminal.
$ ps -p PID         -- select processes by process ID.
$ ps -T             -- Display threads.

---------------------------------------------------------------
top -- provides real-time view of the system's processes. 
-------
key feature: process monitoring, CPU and Memory Usage, Process Proritization, Interactive commands
$ top
$ top -U username       -- to view top processes used by the user.
$ top -c                -- display full command line for each process.
eg.
PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                      
   2188 Linux      9 -11  408748  11948   8236 S   9.1   0.2   5:47.83 /usr/bin/wireplumber                         
   2662 Linux     20   0 2279684  35448  16764 S   9.1   0.5  18:28.80 /usr/bin/gnome-software --gapplication-serv+ 
  51968 Linux     20   0 1132.0g 910964 107880 S   9.1  11.7  57:45.81 /opt/google/chrome/chrome --type=renderer -+ 

$ top -n 5              -- to run the top command 5 times and exit.
$ top -d 5              -- to update the display in every 5 seconds. 
$ top -b -n 1 > system_report.txt  -- the system_report.txt will have the output of top in the file. 
--------------------------------------------------------------------

vmstat:   -- to display detailed information about system resource utilization, includeing cpu, memory , disk and swap usage.
------------
$ vmstat
$ vmstat 5 10           -- to display the system statistics every 5 seconds and for 10 times.
$ vmstat -S m 5 10      -- to diplay the memory usage in megabytes every 5 seconds and for 10 times.

---------------------------------------------------------------
sar :  --  System Activity system_report
-----
-- used to collect, report, and save system activity information. 
-- it provides detaile statistics on varoius sytem resources, makig it useful for performance analysis and troubleshooting. 

$ sar -u            -- to show cpu usages.
$ sar -u 1 5        -- to display CPU usages every 1 seconds for 5 intervals. 
$ sar -r -h         -- Display memory usage in human readable format.
$ sar -r 1 5        -- to display memory useages every 1 seconds for 5 intervals. 
$ sar -r 1 5 -h     -- to display memory usages that is easier to read as human. 
eg. 
01:51:55 PM kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty
01:51:56 PM    656.0M      1.7G      4.3G     58.7%     43.1M      2.0G     32.7G    220.0%      3.5G      2.4G    244.0k
01:51:57 PM    669.0M      1.7G      4.3G     58.6%     43.1M      2.0G     32.7G    219.9%      3.5G      2.4G    244.0k

$ sar -f /var/log/sysstat/sa10    -- display saved data from a specific file. 
$ sar -f /var/log/sysstat/sa10 -s 8:00:00 -e 10:00:00 -u 
-- this command will display the historical CPU utilization repfor from 8 am to 10 am using the data from file "sa10".
eg. 
Linux@Practical:~/Downloads$ sar -f /var/log/sysstat/sa -s 08:00:00 -e 10:00:00 -u
sa02   sa03   sa04   sa05   sa07   sa28   sa29   sa30   sa31   sar02  sar03  sar04  sar27  sar28  sar29  sar30  
Linux@Practical:~/Downloads$ sar -f /var/log/sysstat/sa31 -s 08:00:00 -e 10:00:00 -u
Linux 6.8.0-31-generic (Practical) 	05/31/2024 	_x86_64_	(8 CPU)

09:25:40 AM     CPU     %user     %nice   %system   %iowait    %steal     %idle
09:30:06 AM     all      1.63      0.00      0.78      0.05      0.00     97.54
09:40:02 AM     all      0.98      0.00      0.60      0.02      0.00     98.40
09:50:02 AM     all      1.66      0.00      0.78      0.08      0.00     97.47
Average:        all      1.38      0.00      0.71      0.05      0.00     97.86


watch:  -- commadn tool for monitoring monitoring and troubleshooting various system-related tasks. 
------  -- it helps to quickly identify changes, detect issues, and stay informed about the state of the system.
-n      -- interval in seconds
-d      -- differneces
-P      -- precise 

$ watch -n 5 df -h          -- to display the disk usage in human readable format in every 5 seconds.
$ watch -n 2 ls -l          -- to display the listing long format direcotry every 2 seconds
$ watch -n 2 top            -- to display the running processs every 2 seconds.
$ watch -n 1 netstat -antp  -- to display netstat command for active network connections every 1 second. 
$ watch -d -n 2 uptime      -- to display the suystem's uptime every 2 seconds. 
$ watch -d 'ls -l | fgrep joe'    -- to display the files owned by joe

---------------------------------------------------------------------------------------------------------



====================================================================================================================

Task scheduling
---------------
At :  used to schedule a command or script to be executed. It is intended for one-time task. 
-----
at <time>
HH:MM(am/pm) DD.MM.YY YYYY-MM-DD MM/DD/[cc]YY MMDD
-now +num period minutes hours days weeks
eg.
$ echo 'command' | at time
$ echo "ls -l /home/user" | at 15:00

Enter Interactve Mode:
$ at time
eg.
at 15:00
at> ls -l /home/user
at> <Ctrl+D>

Specific Data and time
$ at 10:30 AM tomorrow
$ at 2:00 PM 06/10/2024

named times.
eg. at midnight
at noon

$ atq               -- List scheduled jobs 
$ at -c job_number  -- display details of a specific job. 
--------------------------------------------------------------

Cron:    - time-based job scheduler allowing users to schedule commands or scritps to run periodically at fixed date, time or intervals. 
------
  *     *      *     *       * 
<min> <Hour> <DoM> <Month> <DoW> <Command/Script>
[00-59] [00-23]  [1-31]    [1-12]    [0-6/1-7] 
					     
* = any
/ = frequency. */N, A-B/N   eg. /5 for every 5 minutes.
, = multiple. A,B,C
- = range. A-B

* * * * * command_to_run
│ │ │ │ │
│ │ │ │ └─ Day of the week (0-6, Sunday is 0)
│ │ │ └─── Month (1-12)
│ │ └───── Day of the month (1-31)
│ └─────── Hour (0-23)
└───────── Minute (0-59)

#crontab  - 
---------
$ crontab -e                -- Edit Users cron table
$ crontab -l                -- view or list out cron table for the current user.
$ crontab -e -u username    -- edit cron table for a specific users. 
$ 30 2 * * * /path/to/script.sh     -- cron job to the cron table using this command.
$ 0 * * * * /path/to/script.sh      -- to run script every hour.
$ 0 0 * * * /path/to/script.sh      -- to run script every midnight.
$ */15 * * * * /path/to/script.sh   -- to run script every 15 minutes.
$ 0 0 1,15 * * /path/to/script.sh   -- to run on specific date i.e. 1st and 15th day.

===========================================================================================================================

Logs location: /var/log

<DateTime>	<Hostname>	<Process>[PID]:	Message

var/log/syslog
== stores all records about any global activity in the system. Basically, every event that happens goes into this log.
var/log/dmesg
== stores all logs related to system drivers.
var/log/cups
== stores all logs related to printer.
/var/log/auth.log
== stores all security-related actions. Those include login, logout, and root user activity.
/var/log/kern.log
== stores events of the kernel like info, warning, and errors. Those logs are especially useful for custom kernels.
/var/log/boot.log
== stores system startup info.
/var/log/apt
== stores apt service logs.
/var/log/utmp
== stores users currently logged in the system. $who -H   or    $ w 
/var/log/wtmp
== stores users previously logged in. It contains the past data from utmp. $last -R
/var/log/btmp
== stores failed login attempts. $lastb

=================================================================================================================

Network Tools/Commands
----------------------
Ping:       -- to test the reachability of a host on an IP networking and to measure the round-trip time for messages sent from the source to Destination.
------
$ ping google.com 
$ ping -c 5 google.com      == to send ICMP pagckage to defined number.
$ ping -i 0.5 google.com    == to wait for specifed number of seconds.
$ ping -s 1000 google.com   == to send packets with 1000 bytes of data.
$ ping -t 64 google.com     == to set the Time to leave for packets.
$ ping -I eth0 google.com   == to ping by choosing specific interface.

traceroute :    = to trace the route that packets take from local host to a specified destination hosts.
--------------	
$ traceroute www.example.com
$ traceroute -n -m 15 google.com   == trace google with maximum 15 hops and does not resolve hostname.
$ traceroute -f 5 example.com      == trace starting from TTL5 (skipping first 4 hops)
$ traceroute -w 2 8.8.8.8          == trace with a timeout of 2 seconds for each probe.
$ traceroute -T -p 80 example.com  == trace with TCP SYN on port 80.
 
mtr :   Network diagnostic tools with combination of traceroute and ping into single command.
------
$ mtr google.com 
$ mtr -c 10 google.com      == will send 10 packets to each hops along the route to google.com
$ mtr -n google.com         == will display ip address instead of hostname.
$ mtr -s 0.5 google.com     == will send prove packets to google.com to 0.5 seconds, good for frequent monitoring. 
$ mtr -r google.com         == it does not resolve hostnames.
$ mtr -i eth0 google.com    == to specify source interface address
$ mtr -d google.com         == to enable debugging output.


arp:
-----
$ arp
$ arp -f /path/to/arpfile           -- to read entries from a file and then add them to ARP table.
$ arp -s 192.168.1.3 00:AA:BB:CC:DD:EE  -- to manually set static ARP.
$ arp -i eth0 -s 192.168.1.3 00:AA:BB:CC:DD:EE    -- to set manual static apr for specifif interface.
$ arp -s 192.168.1.4 -D eth0            -- to set static apr entry using the interface mac address.
$ arp -i eth0 -a                    -- to get arp from specific interface. 
$ arp -d 192.168.1.1                -- to Delete arp.
$ arp -v -a                         -- to enable verbose output for detail information.

-----------------------------------------------------------------------------------------------------------------

ip :  Internet Protocol. 
------------------------
$ ip add        -- display the IP address with assgined interfaces. 
$ ip route      -- display the route 
$ ip addr add 192.168.1.10/24 dev eth0      -- add IP address to interface
$ ip link show eth0
$ ip link set dev eth0 mtu 1500             -- Set interface MTU.
$ ip neigh                                  -- to display neighbor cache entries.
$ ip neighbour show/add/change/replace/delete
$	ip route show/add/change/replace/delete/get/
$ ip route add 10.0.0.0/24 via 192.168.1.10     -- to add a static route
$ ip link set dev eth0 up                   -- to bring enterface up.
$ ip link add link eth0 name vlan10 type vlan id 10   -- to create a vlan interface
$ ip add show eth0                          -- to display detail information about an interface. 
$ ip -s link show eth0                      -- to show statictics for an interface. 
$ sudo ip link set eth0 up / down           -- enable/disable interface.
--------------------------------------------------------------------------------------
Ifconfig : interface Configuration, used to configure and display network interface parameters.
---------
$ ifconfig 
$ ifconfig  eth0               -- display specific interface
$ sudo ifconfig eth0 up        -- to enable network interface
$ sudo ifconfig eth0 down      -- to disable network interface
$ sudo ifconfig eth0 192.168.1.1    -- to assign IP address
$ sudo ifconfig eth0 192.168.1.1 netmask 255.255.255.0 broadcast 192.168.1.255
$ sudo ifconfig eth0 netmask 255.255.255.0      -- to change netmask
$ sudo ifconfig eth0:0 192.168.1.2      -- to assign secondary IP address.
$ ifconfig -s       -- to display interface statics.
eg. 
Linux@Practical:$ ifconfig -s
Iface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
lo              65536    26944      0      0 0         26944      0      0      0 LRU
virbr0           1500        0      0      0 0             0      0      0      0 BMU
wlo1             1500  6336535      0    117 0        718207      0      0      0 BMRU

--------------------------------------------------------------------------------------
Netplan:  : --network configuration which is created in YAML.
----------
$ sudo netplan get             -- will display all saved connected networks with info and password
$ sudo netplan status          -- will dislay mac address ip , dns and route along with subnet. 
$ sudo netplan try             -- validate syntax or try to apply a new neetlan config , with automatic rollback 
$ sudo netplan apply           -- to apply changes.
$ etc/netplan/                   -- Direcgtory where YAML configuration files are stored. 
$ sudo netplan generate
$ sudo journalctl -u NetworkManager     -- to check the status and logs related to netplan.

==== Basic Network configuration in YAML file. -- For Static IP

#####

network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: true
    eth1:
      addresses:
        - 192.168.1.100/24
      gateway4: 192.168.1.1
      nameservers:
        addresses:
          - 8.8.8.8
          - 8.8.4.4

#####

==== Getting IP from DHCP server.

#####
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: true
    eth1:
      dhcp4: true
#####

to apply changes, 
$ sudo netplan apply

------------------------------------------------------------------------------------------
networkctl:  -- command line utility with systemd as the init system to inspect and manage network , interface and connection settings. 
-----------
$ networkctl
eg. 
Linux@Practical/etc/netplan$ networkctl
IDX LINK   TYPE     OPERATIONAL SETUP    
  1 lo     loopback carrier     unmanaged
  2 wlo1   wlan     routable    unmanaged
  3 virbr0 bridge   no-carrier  unmanaged

$ networkctl status     -- will display IP and with logs and link up and down record.
$ networkctl status wlo1    -- will display about the interface  details such as module, MTU, drivers and more.
$ sudo networkctl up wlo1   -- to enable wlo1  (Wireless) 
$ sudo networkctl reload    -- reload .network and .netdev files
-----------------------------------------------------------------------------------------------------------------
netstat:     : display network connections, routing table, interface statistics, masquerade connections and multcast memberships.
----------    -- Alternate name now is 'ss'
$ netstat -a        : display all interface
$ netstat -l        : display listening and established connections
$ netstat -t        : display all TCP connections
$ netstat -u        : display all UDP connections
$ netstat -i        : display network interfaces and statistics
$ netstat -r        : display routing table
$ netstat -p        : display PID and program name 
$ netstat -s        : display summary staticstics for each protocol. 
$ netstat -ant      : display all tcp connection with ip address and port no. 
$ netstat -tuln     : display all listening TCP and UDP ports

$ ss -4             : Display all IPv4 sockets. 
$ ss -6             : Display all IPv6 sockets.
$ ss -ant | grep 443
$ ss -a 
$ ss -t             : display all tcp connection 
$ ss -e             : display  detailed socket information.
-------------------
List Network Connections and Sockets  --- more details below.

lsof -i             ==> List all open network connections
lsof -1:80          ==> List open TCP/UDP connections with port 80
lsof -i tep:1-1024  ==> List open TCP connections with a given port range
lsof -i-n           ==> List open network connections with no reverse DNS lookup
lsof -i-n -P        ==> List open network connections with no port name conversion
lsof -i6            ==> List open IPv6 network connections (-i4 for IPv4)
-----------------------------------------------------------------------------------------------------------

nmtui: text-based user interface  (tui) for managing network connections using Network Manager Service.
------    -- Graphical Network Configuration.
$ nmtui
$ nmtui-edit    -- directly taken to windows where we can select interface or ssid and edit. 
$ nmtui-connect 
$ nmtui-hostname    -- directly change the hostname. /
------------------------------------------------------------------------------------------------------------

nmcli:  -- Command-line tool for managing network connections using Network Manager.
-------
$ nmcli               == will display Nework interface devices with detail IP address and MAC address.
$ nmcli general status   == will show general network status.
$ nmcli device        == will display the interface device name, and its state and connection.
$ nmcli device status  == will display detailed view of interface such as its path, ip address, gateway, interface device type.
$ nmcli connection show  == will list all network connections. 
$ nmcli connection show "connection_name"  == dwill show detail of a specific connection
$ nmcli connection add type ethernet con-name "new_connection" ifname eth0  == add new connection. 
$ nmcli connection add type ethernet con-name "static_eth" ifname eth0 ipv4.addresses "192.168.1.100/24" ipv4.gateway "192.168.1.1" ipv4.dns "8.8.8.8,8.8.4.4" ipv4.method manual
== this will add new static IP ehternet connection.
$ nmcli connection add type ethernet con-name "dhcp_eth" ifname eth0 ipv4.method auto
== this will create a new DHCP ethernet Connection .
$ nmcli connection modify "connection_name" ipv4.addresses "192.168.1.100/24" ipv4.gateway "192.168.1.1"
== this will modify an existing connection. 
$ namcli connection detele "connection_name"    == will delete the connection .
$ nmcli connection up "connection_name"  or down   == will active or deactivate the connection .
$ nmcli device who eth0                 == will display the details of a specific device. 
$ nmcli device connect/disconnect eht0  == will connect a device to network. 
$ nmcli device wifi list                == will display all available wifi ssid with rate and signal strength. 
$ nmcli device up (interface name)      == to enable the interface.
$ nmcli device down (interface name)    == to disable the interface.
$ nmcli device wifi connect "ssid" password "password"    == to connecto to wifi. 
$ nmcli general hostanme "new_hostname"   == to change the hostname to new-hostname. 
$ nmcli connection show --active        == display all active connections. 


tcpdump : a command-line packet analyzer used to capture and analyze network traffic. need sudo access or root access.   
--------
# tcpdump -i etho   == capture packets on a specific interface.
# tcpdump -i ehto -w capture.Participant  ==capture package and save to a file. 
# tcpdump -r capture.pcap     == to read packets from a file. 
# tcpdump -i eth0 tcp         == to capture only specific filler , i.e. TCP packets.
# tcpdump -i eth0 host 192.168.1.1  == to filter by host. 
# tcpdump -i eth0 src 192.168.1.1   == to filter by source IP. 
# tcpdump -i eth0 dst 192.168.1.1   == to filter by Destination IP. 
# tcpdump -i eth0 port 80           == to filter by port. 
# tcpdump -i eth0 -s 100            == to capture the limited number of bytes. 
# tcpdump -i eth0 net 192.168.1.0.24  == to capture from a specific Network. 
# tcpdump -i eth0 ether proto 0x0806  == to capture with specific ethernet type. 
# tcpdump -i eth0 tcp port 443        == to capture all HTTPS traffic.
# tcpdump -nni any port 53            == to capture port 53(DNS) for all interface. 'any' all interface.
== n = not to convert address to names,  n = not to convert port number to service names.
# tcpdump -l > txt & tail -f txt      == to capture all packages 'l' will write its output to standard output in txt file, '-f' will keep on listening and tail will display last 10 lines.
# tcpdump -i any arp                  == to capture arp, mac address for all interface. 

Again using SAR for Network check
sar :  colletct, report or save system activity information.
------
$ sar -n DEV 2 10  -- to display network throughtput every 2 seconds for 20 seconds to detect network issue. 
$ sar -n EDEV 2 10  -- to display the network error  and dropped packets. 

-----------------------------------------------------------------------------------------------------
lsof (List Open Files)
-----------------------
lsof                ==> List all files opened by any process
lsof -p 1000        ==> List files opened by a process with PID 1000
lsof -p #1000       ==> List files opened by any other process than PID 1000
lsof -u <username>  ==> List files opened by specific user-owned processes
lsof -u^root List   ==> files opened by all non-root users
lsof <directory>    ==> Show what processes are using <directory>
lsof <filename>     ==> List all processes that have opened <filename>
lsof +D /tmp        ==> List all files that have been opened under /tmp
lsof +L1            ==> List files deleted but still held open by running processes
lsof -c <command>   ==> List open files by processes executing <command>
lsof -d mem         ==> List all memory-mapped files

other uses
lsof -U             ==> List open unix domain sockets
lsof /dev/tty1      ==> List commands/processes associated with /dev/tty1
kill -9 $(lsof -t -u <username>) ==> Kill all activities of a specific user
-----------------------------------------------------------------------------------------------------

Firewall: -- Dynamic Firewall Management Tool with support for network/firewall zones that define the trust level of network connections or interfaces.
-----------
in Centos --- firewall-cmd 
in Ubuntu --- ufw  (Uncomplicated Firewall) 

$ sudo ufw statu        == to check the status 
$ sudo ufw allow ssh    == to allow ssh 
$ sudo ufw allow 443/tcp    == to allow port 443, https with tcp 
$ sudo ufw deny 80/tcp      == to deny acces to  port 80 with tcp.
$ sudo ufw delete deny 80/tcp   == to delete the rule.
$ sudo ufw reject http
$ sudo ufw limit 80/tcp

$ sudo ufw enable/disable
$ sudo ufw deny from <source> to <dest> port <port>
$ sudo ufw limit 80/tcp
$ sudo ufw allow out on <ifname> to any port <port> proto tcp
$ sudo ufw deny in on <ifname> from any <port> proto tcp
$ sudo ufw delete allow from …
$ sudo ufw status numbered
$ sudo ufw delete 1
$ sudo ufw app list
$ sudo ufw allow "<app-profile>"
$ sudo ufw reload         == after any changes made, to load the new changes.
------------------------------------------------------------------------------------------------------------------------------------------
iptables: Administration tool for IPV4 and IPv6 packet filtering and NAT.
----------
$ sudo iptables -L          -- to list out the rules.
$ sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT        -- to add rule to allow ssh connection.
$ sudo iptables -A INPUT -j DROP                            -- to drop all incoming traffic.
$ sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT       -- to add a rule to allow outgoinh http connection.
$ sudo sh -c "iptables-save > /etc/iptables/rules.v4"       -- to save the current rules.
$ sudo service iptables save                                -- to save the current rules.
==========================================================================================================================================
Remote login using SSH
-----------------------
-- Shecure Shell  (ssh) - protocol used to securely access and manage network devices, servers, and other systems over an unsecured network. 

Using user and passwd
$ ssh <username>@<host-address>:<port>
$ ssh username@hostname/IP
$ ssh -p 2222 useranme@hostname/IP      -- when port is changed, eg. 2222

Using ssh private key
$ ssh-keygen
eg.
Linux@Practical:~$ ssh-keygen 
Generating public/private ed25519 key pair.
Enter file in which to save the key (/home/Linux/.ssh/id_ed25519):  
/home/Linux/.ssh/id_ed25519 already exists.
Overwrite (y/n)? y
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/Linux/.ssh/id_ed25519
Your public key has been saved in /home/Linux/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:hAW8lz77BqhIODxBkhC0NevAYt9yXMPqxMBBBVvAJ/s Linux@Practical
The key's randomart image is:
+--[ED25519 256]--+
|=+o=    1oo. .   |
| .+ +  o.3  . .  |
| . 4  . 9.   .   |
|o o oo o .o.. .  |
|oo o....Soo  + . |
|.o .. ...+= o +  |
|. .  .  .o=A .o..|
|         o=.   o.|
|           .  ..E|
+----[SHA256]-----+

$ ssh-copy-id username@hostname/IP        -- copy the generated ssh key (Public) to the server for secure access without passwrod. First time password need then no need after that. 
$ ssh -L local_port:destination_host:destination_port username@hostname       -- Local Port Forwarding
$ ssh -R remote_port:localhost:local_port username@hostname                   -- Remote port Forwarding

Location: at local. 
$ ~/.ssh/config

Host alias
    HostName hostname
    User username
    #Port 22   
     Port 2222       # changing port to 2222
    IdentityFile ~/.ssh/id_rsa
    PermitRootLogin no      # disable root login through ssh.

Server Location:
$ /etc/ssh/sshd_config

==========================================================================================================================================
Using tar for handling archive
-------------------------------
tar : - is a command utility used for creating, maintaining, modifying and extracting files from archive file commonly referred as tarballs or tar archives.
- stands for Tape archive.

command.
tar <options> <files/dirs>

commonly used options:
-c: Create a new archive.
-x: Extract files from an archive.
-t: List the contents of an archive.
-v: Verbose mode, show progress.
-f: Specify the archive file name.
-z: Compress the archive using gzip.
-j: Compress the archive using bzip2.
-J: Compress the archive using xz.
-r: Append files to an archive.
-u: Update files in an archive.
--exclude: Exclude files matching a pattern.


Create archive
$ tar -czvf archive_name.tar.gz /path/to/directory_or_files   --gzip compression.
$ tar -cvf file/dir/. (  ----. is current directory)

List archive
$ tar -tvf 

Add new files/dirs to archive
$ tar -rvf
$ tar -rvf archive_name.tar /path/to/new_files

Updating an archive:
$ tar -uvf archive_name.tar /path/to/updated_files

Excluding Files:
$ tar --exclude='*.log' -cvf archive_name.tar /path/to/directory_or_files

Extract an archive
$ tar -xvf
$ tar -xzvf archive_name.tar.gz

$ tar -cjvf archive_name.tar.bz2 /path/to/directory_or_files    -- bzip2 compression
$ tar -xjvf archive_name.tar.bz2      -- extracting bzip2 compressions

=============================================================================================================================
Downloading files using wget
------------------------------
wget: - is non-interacctive command-line utility for downloading from the web.
-----
$ wget https://example.com/file.text
$ wget -O custom_name.txt http://example.com/file.txt   -- to provide own name when file is downloaded.
$ wget -c https://example.com/file.txt                  -- to resume interrupted Download.
$ wget -i urls.txt          -- when we have a file with links, we can use that file for each URL 
$ wget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://example.com     -- to mirror a website.
$ wget --mirror --convert-links --adjust-extension --page-requisites --no-parent --reject '*.mp3' --level=5 http://example.com     -- to mirror a website to limit the dept and exclude certain files. 
$ wget -d https://example.com/file.txt                -- debug turn on for detailed output and for troubleshooting.
$ wget -a download.log http://example.com/file.txt    -- to save the output to a log file. 
$ wget --user-agent="Mozilla/5.0" http://example.com/file.txt     -- to mimic a type of a web browser on header, useful when websites block downloads from non-browser clients.
$ wget --limit-rate=100k http://example.com/file.txt      -- to limit download speed.
$ wget ftp://username:password@ftp.example.com/file.txt   -- to retrieve files via FTP.
$ wget -P /path/to/directory http://example.com/file.txt  -- to specify download directory.
$ wget --timeout=60 http://example.com/file.txt           -- to download with timeout.
$ wget --tries=10 http://example.com/file.txt             -- to automatically retry download with specified number of times.
$ wget --user=username --password=password http://example.com/protected/file.txt       -- to download files from server that requires authenticcation.
$ wget -b http://example.com/file.txt       -- to allow continued work in the terminal. 
$ wget -r -l1 -H -nd -A jpg,jpeg,png,gif http://example.com         -- to download all images form a website. 


curl:  - command line tool for transferring data with URLs supproting various protocols.
-----   - it is versatile and often used in scripting and automation.
$ curl -O http://example.com/file.txt       -- basic download 
$ curl -o custom_name.txt http://example.com/file.txt     -- to download with custom filename.
$ curl -C - -O http://example.com/file.txt  -- to resume interrupted Download
$ curl -O http://example.com/file1.txt -O http://example.com/file2.txt  -- to download multiple files. 
$ curl -u username:password -O http://example.com/file.txt    -- to download with authentication.
$ curl -d "param1=value1&param2=value2" -X POST http://example.com/resource   -- to download using POST data.
$ curl -X POST -H "Content-Type: application/json" -d '{"key1":"value1","key2":"value2"}' http://example.com/api/resource         -- seding JSON data with POST
$ curl -F "file=@/path/to/file.txt" http://example.com/upload         -- to upload a file. 
$ curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" http://example.com/protected_resource     -- to use bearer token authentication . 
$ curl -x http://proxy.example.com:8080 -U username:password http://example.com/file.txt      -- to download with a proxy.
$ curl -L http://example.com/redirect         -- to follow redirects.
$ curl -D headers.txt http://example.com      -- to save HTTP response headers.
$ curl --limit-rate 100k http://example.com/largefile.iso       -- to limit download speed.
$ curl -b "name=value" http://example.com                       -- to save cookies to a file and use them in subsequent requests.
 eg. 
 $ curl -c cookies.txt http://example.com/login
 $ curl -b cookies.txt http://example.com/resource

$ curl http://example.com -o - | grep -Eo '<img src="[^\"]+"' | cut -d'"' -f2 | xargs -n 1 curl -O       -- to download all images from a webpage.
$ curl ftp://ftp.example.com/file.txt -u username:password -O     -- to download a file via FTP.
$ curl -k https://example.com         -- ignore SSL certifiacte validation.
$ curl -X DELETE http://example.com/resource/123      -- send custom request method.

 -- output response to a variable.
response=$(curl -s http://example.com)         
echo $response

Curl in scripts:
-----------------
#!/bin/bash
URL="http://example.com"
if curl -s --head "$URL" | grep "200 OK" > /dev/null
then
  echo "The website is up!"
else
  echo "The website is down!"
fi

---------------------

rsync:  for syncing file and directories between different locations.
----   - commonly used for backup and mirroring. 
$ rsync -av /source/ /destination/          -- sync files from source to destination with '-a' as archive mode, and '-v' as verbose output.
$ rsync -av --delete /source/ /destination/   -- to delete files in destination diredcotry that are not present in the soure location. 
$ rsync -av -e ssh /source/ user@remote:/destination/     -- to sync over ssh
$ rsync -av -e 'ssh -i /path/to/private_key' /path/to/local/directory/ user@192.168.1.100:/path/to/remote/directory/        -- to use ssh key for authentiaton.
$ rsync -av --exclude 'pattern' /source/ /destination/    -- to exclude specific files and directories. 
$ rsync -av --exclude '*.log' --include 'important.log' /source/ /destination/    -- to include and exclude as required. 
$ rsync -av --bwlimit=1000 /source/ /destination/         -- to sync with specific bandwidth limit. 
$ rsync -av --dry-run /source/ /destination/              -- to see what would be transferred witout actual copying any files. 
$ rsync -av --update /source/ /destination/               -- to sync only changed files. 
$ rsync -avz /source/ /destination/                       -- compure data during transfer.
$ rsync -av --progress /source/ /destination/             -- to show progress notification during transfer.
$ rsync -av --link-dest=/previous_backup/ /source/ /current_backup/       -- to backup with hard links to save space. 
$ rsync -av --log-file=/path/to/logfile /source/ /destination/         -- to log the details of the transfer file. 

Automatic Backup with a script.
-------------------------------
#!/bin/bash
SOURCE="/path/to/source"
DESTINATION="user@remote:/path/to/destination"
LOGFILE="/path/to/logfile"
BWLIMIT=1000

rsync -avz --delete --log-file=$LOGFILE --bwlimit=$BWLIMIT -e ssh $SOURCE $DESTINATION

----------------------------------

#!/bin/bash
SOURCE="/path/to/local/directory/"
DESTINATION="user@192.168.1.100:/path/to/remote/directory/"
SSH_PORT=2222
PRIVATE_KEY="/path/to/private_key"
BW_LIMIT=2000
EXCLUDE_PATTERN="*.tmp"

rsync -avz --delete --progress --exclude "$EXCLUDE_PATTERN" --bwlimit=$BW_LIMIT -e "ssh -p $SSH_PORT -i $PRIVATE_KEY" $SOURCE $DESTINATION
-----------------------------------

=============================================================================================================================
OS/Kernel/Hardware info commands:
----------------------
uname -- display information about current operating system and hardware.
--------
$ uname           : Displays the kernel name (e.g., "Linux").
$ uname -s        : Displays the kernel name (same as just running $ uname).
$ uname -n        : Displays the network node hostname.
$ uname -r        : Displays the kernel release number.
$ uname -v        : Displays the kernel version.
$ uname -m        : Displays the machine hardware name (e.g., "x86_64").
$ uname -p        : Displays the processor type (e.g., "x86_64").
$ uname -i        : Displays the platform or hardware interface (e.g., "unknown").
$ uname -o        : Displays the operating system name (e.g., "GNU/Linux").
$ uname -a        : Displays all the above information in a single line.


lsb_release       : Display information about the linux      
------------
$ lsb_release -h,       : show this help message and exit
$ lsb_release -v,       : show LSB modules this system supports
$ lsb_release -i,       : show distributor ID
$ lsb_release -d,       : show description of this distribution
$ lsb_release -r,       : show release number of this distribution
$ lsb_release -c,       : show code name of this distribution
$ lsb_release -a,       : show all of the above information
$ lsb_release -s,       : show requested information in short format
eg. 
Linux@Practical:~$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 24.04 LTS
Release:	24.04
Codename:	noble

Linux@Practical:~$ lsb_release -as
No LSB modules are available.
Ubuntu
Ubuntu 24.04 LTS
24.04
noble

------------------------------------------------------------
cat /etc/os-release :  -- standard file in linux that provides the information about the operating system.
-------------------
Linux@Practical:~$ cat /etc/os-release
PRETTY_NAME="Ubuntu 24.04 LTS"
NAME="Ubuntu"
VERSION_ID="24.04"
VERSION="24.04 LTS (Noble Numbat)"
VERSION_CODENAME=noble
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
UBUNTU_CODENAME=noble
LOGO=ubuntu-logo

hostnamectl - Display Comprehensive information about the Linux distribution.
-------------------
Linux@Practical:~$ hostnamectl
 Static hostname: Practical
       Icon name: computer-laptop
         Chassis: laptop 💻
      Machine ID: 11111111111111111111111111111111
         Boot ID: 22222222222222222222222222222222
Operating System: Ubuntu 24.04 LTS                
          Kernel: Linux 6.8.0-31-generic
    Architecture: x86-64
 Hardware Vendor: HP
  Hardware Model: HP Laptop 14s-dq2xxx
Firmware Version: F.33
   Firmware Date: Wed 2023-10-04
    Firmware Age: 8month 3d
----------------------------------------------------

lscpu:  -- is used to diplay detail information about the CPU architecture. 
-------
$ lscpu
$ lscpu -J                -- to output in JSON format.
$ lscpu -p                -- to output in raw, parseable format.

-----------------------------------------------------

free  -- display information about the system's memory usages, including both physical and swap space. 
---------
$ free
$ free -h             -- to display humam readable memory usage.
$ free -m             -- output in megabytes
$ free -g             -- output in Gigabytes.
$ free -h -s 2        -- to display continuously in 2 seconds interval. 
$ free -l             -- to dipslay low and high memory staticstics. 
$ free --output=total,used,available        -- to display with only specific columns, 
eg. 
              total        used    available
Mem:        16368464     1082468    14850920
Swap:        2097148           0     2097148

Script for memory usages. 
-------------------------
#!/bin/bash

LOGFILE="/var/log/memory_usage.log"

while true; do
    echo "$(date)" >> $LOGFILE
    free -h >> $LOGFILE
    echo "" >> $LOGFILE
    sleep 5
done
---------------------------

pwdx : to display the current working directory 
------
eg. : 
$ top           == to find out the PID
   PID USER  :
   ------    PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                      
  82514 Linux     20   0 1132.0g 254172 128688 S  15.9   3.3   6:14.34 chrome                                       
   3249 Linux     20   0   40.9g 239220  75236 S   1.7   3.1  64:19.87 skypeforlinux                                
   2662 Linux     20   0 2279684  35448  16764 S   1.3   0.5  20:46.74 gnome-software       

to find out the pwd of PID 82514, 
Linuxt@Practical:~/Downloads$ pwdx 82514
82514: /proc/4246/fdinfo

lsmod : --- List of Kernal modules that are currently loaded.
-------
$ lsmod 

lshw  -- list of hardware components of your system.
------------------
$ lshw -short       -- will display brief summary of the hardware components.
Linux@OPractical:~/Downloads$ lshw -short
WARNING: you should run this program as super-user.
H/W path     Device        Class          Description
=====================================================
                           system         Computer
/0                         bus            Motherboard
/0/0                       memory         8064MiB System memory
/0/1                       processor      11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz
/0/100                     bridge         11th Gen Core Processor Host Bridge/DRAM Registers
/0/100/2     /dev/fb0      display        TigerLake-LP GT2 [Iris Xe Graphics]
/0/100/4                   generic        TigerLake-LP Dynamic Tuning Processor Participant
/0/100/8                   generic        GNA Scoring Accelerator module
/0/100/e                   storage        Volume Management Device NVMe RAID Controller
/0/100/14                  bus            Tiger Lake-LP USB 3.2 Gen 2x1 xHCI Host Controller
/0/100/14.2                memory         RAM memory

lspci   --- display all plug and play or PCI(peripheral Component Interconnet) devices connected to system.
---------------
$ lspci -v            -- display detail information about each PCI device


lsusb  - list all usb devices connected to the system.

lsblk           - list information about all available block devices, including disks, partitions and logical volumes.
$ lsblk -f      -- display the file system informaton for each block device.

dmidecode        -- display detailed information about the system's hardware as reported by BIOS.
# dmidecode -t memory       -- display information about the system memory modules.

=============================================================================================================================
-----------------------------------------------------------------------------
Managing services
------------------
Systemd - systemd initializes the Linux system after boot process
----------
- units and unit files
- handles the targets - equivalent to runlevels -, which are a combination of units 			"working together" to produce a certain environment
- units:
	 control services, mounts, swap spaces, sockets
- unit files:
	contains different parameters and data about the units - services, devices, mount points

systemctl: - primary commandline tool to interact with the systemd and service manager.
-----------
- unit:
	systemctl list-units (--type=service --state=running)
- unit-files:
	list-unit-files (--type=service)
- Service:
	start, stop, restart, reload, status, mask, unmask, is-enabled, is-failed, cat, list-dependencies, show, edit --full,
- Target:
	get-default, isolate <target>, set-default

$ sudo systemctl start/stop/restart <service>: Start, stop, or restart a service.
$ sudo systemctl status <service>: Check the current status of a service.
$ sudo systemctl enable/disable <service>: Enable or disable a service to start automatically at boot.
$ sudo systemctl is-enabled <service>: Check if a service is enabled or not.

$ systemctl list-units         -- List all active units.
$ systemctl list-unit-files    -- List all available unit files.
$ systemctl show <unit>        -- Display detailed information about a unit.
$ systemctl cat <unit>         -- Display the contents of a unit file.
$ systemctl --type = service / target / socket   -- to display specifi units.

fileter services. 
$ systemctl --type=service --state=active
$ systemctl --type=service --state=inactive
$ systemctl --type=service --state=failed

$ sudo systemctl get-default            -- Show the default target (system state) that will be booted into.
$ sudo systemctl set-default <target>   -- Set the default target to be booted into.
$ sudo systemctl isolate <target>       -- Switch to a specific target (e.g., $ sudo systemctl isolate multi-user.target).
$ sudo systemctl rescue                 -- Boot into the rescue (single-user) mode.

systemctl daemon-reload             -- Reload the systemd manager configuration.
systemctl list-dependencies <unit>  -- Show dependencies of a unit.
systemctl poweroff/reboot/halt      Power off, reboot, or halt the system.
systemctl suspend/hibernate/hybri--d-sleep: Suspend, hibernate, or put the system in hybrid sleep mode.


Journalctl (Logging) Commands:  query the systemd journal
journalctl                -- View the system log.
journalctl -u <service>   -- View the log for a specific service.  -u == unit
journalctl -b             -- View the log since the last boot.
journalctl --since="2023-06-13" // --until="2023-06-14"      -- View the log for a specific date range.
journalctl --user         -- to view system and users login sesseion detail.  
journalctl --system
journalctl --user -g Linux  -- to display logs of the user.    -g = grep,
journalctl -k -g usb // --system -g usb         -- to display kernel message logs with only matching names with usb.

--------------------------------------------------------------------------------------
"/usr/lib/systemd/system"   or    /lib/systemd/system
-- imporatnt part of systemd system and service manager. It contains unit files that define services, targets, sockets, devices and other system resources that systemd manages.
-- includes, unit files such as targets, sockets, device, mount, swap, path, timer, slice or scope extensions.
-- default location for system-wide unit files installed by packages. 
-- viewing a unit file , 
  eg.  cat /usr/lib/systemd/system/sshd.service

  Overriding a unit file. 
  -- creating the same unit file name but adding extension as '.d' then create a '.conf' file within that directory.
  -- good for service and resouces management without having to modify the original unit file. 
  eg. ------------------------------
  sudo mkdir -p /etc/systemd/system/sshd.service.d

  sudo nano /etc/systemd/system/sshd.service.d/override.conf

  [Service]
  Environment="FOO=bar"

  sudo systemctl daemon-reload
----------------------------------------

"/run/systemd/system"
--runtime unit files, which are used for temporary overrides.


"/etc/systemd/system"
-- used for custom, system-specific unit files and overrides. Usually used by Administrators and is not affected by package updates.
-- example as above in usr/lib/systemd/system
--------------------------------------------------------------------------------------------
Creating a unit file          
[Unit]
Description=example
After=

[Service]
Type=simple forking oneshot dbus notify idle
WorkingDirectory=
Restart=
RestartSec=
ExecStart=
ExecStop=

[Install]
WantedBy=multi-user.target
-----------------------------------------------------------------------------------------------------------------------------------
===================================================================================================================================
.bashrc     -- is a shell scprt that bash run whenever it is started interactively. 
--------    -- is used to configure the shell environment, set up aliases, functions, and shell options. 

$ cat ~/.bashrc 
we can set alias or set ennironment for the user.

==================================================
Shell Scripting.
----------------
comment

she-bang, interpreter's path
commands

logical operations
if
case
while
for


===================================================================================================================
to connect to console.

-- find out the connected device from /dev and it is usually ttyUSB0

provide executive or provide full file perission. 
chmod 777 ttyusb0
cu -l /dev/ttyUSB0 -s 9600      == Access console 

===================================================================================================================
Server Hardening:
follow CIS Benchmark: and choose the Linux Distro with version that you want for hardening your server or VM. 
https://www.cisecurity.org/




